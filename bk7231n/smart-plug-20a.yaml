substitutions:
  voltage_divider: "801.10"
  current_resistor: "0.001"
  current_multiply: "0.43"

esphome:
  name: smart-plug-20a
  friendly_name: Smart Plug    # ELIVCO
  #platformio_options:
    #board_build.f_cpu: 60000000L
  on_boot:
    priority: 600
    then:       
      - lock.unlock: child_lock
      - script.execute: led_restore
      - number.set:
          id: set_num
          value: 5
          
bk72xx:
  board: generic-bk7231n-qfn32-tuya
  framework:
    version: latest

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret hotspot_pw

wifi:  
  ssid: !secret wifi_ssid
  password: !secret wifi_password  
  power_save_mode: HIGH
  fast_connect: true
  manual_ip: 
   static_ip: 'your ip'
   gateway: 'your gate way'
   subnet: 255.255.255.0
   dns1: 'your dns1'
   dns2: 'your dns2'

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Smart-Plug Fallback Hotspot"
    password: !secret hotspot_pw

captive_portal:
web_server:


time:
  - platform: homeassistant
    id: homeassistant_time

binary_sensor:
  - platform: status
    name: "Connection Status"
    id: c_status
    on_press:
      then:
        - light.turn_off: wifi_led
    on_release:
      then:
        - if:
            condition:
              for:
                time: 120s
                condition:
                  - binary_sensor.is_off: c_status
            then:
              - button.press: re_start
  - platform: template
    id: warning
    name: Overload Warning
    device_class: problem
    lambda: |-
     if ((id(current).state >= 18) or (id(in_temp).state >= 70)) {
     return true;
     } else {
     return false;
     }
    on_press:
      then:
        - delay: 5s
        - lambda: id(warning).publish_state(false);

      
  # Button on the front is pressed and then toggle relay     
  - platform: gpio
    device_class: power
    internal: True
    pin:
      number: 10
      mode: INPUT_PULLDOWN
      inverted: True
    name: Button # Name to make button visible in HA
    on_click:      
      - min_length: 50ms
        max_length: 1000ms
        then:          
          - if: 
              condition:
               - lock.is_unlocked: child_lock
              then: 
               - switch.toggle: relay
              else:
                - repeat:
                    count: 2
                    then:
                      - light.turn_on: wifi_led
                      - delay: 0.5s
                      - light.turn_off: wifi_led
                      - delay: 0.5s
                      - script.execute: led_restore

    on_multi_click:
      - timing:
        - ON for at least 5s   
        - OFF for at least 0.5s     
        then:
          - if: # if lock is lock, do unlock
              condition:
                lock.is_locked: child_lock
              then:
                  - lock.unlock: child_lock
                  - logger.log: "unlock"
                  - light.turn_on: wifi_led
                  - delay: 1.5s
                  - light.turn_off: power_led          
                  - script.execute: led_restore              

              else: # if lock is unlock, do lock
                  - lock.lock: child_lock
                  - logger.log: "locked"
                  - repeat:
                      count: 2
                      then:
                        - light.turn_on: wifi_led
                        - delay: 0.5s
                        - light.turn_off: wifi_led
                        - delay: 0.5s 
                  - script.execute: led_restore
      - timing:
        - ON for at least 10s   
        - OFF for at least 0.5s
        then:
          - button.press: re_start

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    internal: true
    update_interval: 300s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

  - platform: total_daily_energy
    name: 'Total Daily Energy'
    power_id: power
    unit_of_measurement: 'kWh'
    state_class: total_increasing
    device_class: energy
    accuracy_decimals: 3
    icon: mdi:counter
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001

  - platform: template
    name: "Power Factor"
    unit_of_measurement: "%"
    accuracy_decimals: 2
    lambda: return id(power).state / (id(current).state * id(voltage).state);
    filters:
      multiply: 100

  - platform: internal_temperature
    name: "Internal Temperature"
    id: in_temp
    on_value:
      then:
        - if:
            condition:
              and:
                - switch.is_on: switch_olp
                - lambda: return (id(in_temp).state >= 70);
            then:
              - logger.log: "Overload Temp"
              - switch.turn_off: relay
              - lambda: id(warning).publish_state(true);

    
  - platform: hlw8012
    model: BL0937
    current_resistor: ${current_resistor}
    voltage_divider: ${voltage_divider}
    sel_pin:
      number: 24
      inverted: true
    cf_pin: 
      number: 7
      inverted: true
    cf1_pin: 
      number: 6
      inverted: true
    current:
      name: "Current"
      id: current
      icon: mdi:current-ac
      filters:
        - multiply: ${current_multiply}
        #- lambda: return x * 0.443548;
      unit_of_measurement: A
      on_value:
        - if:
            condition:
              for:
                time: 15ms
                condition:
                  and:
                    - switch.is_on: switch_olp
                    - lambda: return (id(current).state >= 20);
            then:
              - logger.log: "Overload 20A"
              - switch.turn_off: relay
              - lambda: id(warning).publish_state(true);
        - if:
            condition:
              for:
                time: 2min
                condition:
                  and:
                    - switch.is_on: switch_olp
                    - lambda: return (id(current).state >= 18);
            then:
              - logger.log: "Overload 18A"
              - switch.turn_off: relay
              - lambda: id(warning).publish_state(true);
        - if:
            condition:
              for:
                time: 60min
                condition:
                  and:
                    - switch.is_on: switch_olp
                    - lambda: return (id(current).state >= 16 );
            then:
              - logger.log: "Overload 16A"
              - switch.turn_off: relay
              - lambda: id(warning).publish_state(true);
        - script.execute: power_save
    voltage:
      name: "Voltage"
      id: voltage
      #filters:        
       # - lambda: return x / 3;
    power:
      name: "Power"
      id: power
      accuracy_decimals: 2
      #filters:
        #- lambda: return x / 3;      
    update_interval: 3s 

number:
  - platform: template
    name: "Set Stanby W"
    id: set_num
    optimistic: true
    icon: mdi:numeric
    min_value: 0
    max_value: 100
    unit_of_measurement: W
    step: 5

text_sensor:
  - platform: version
    name: "Esphome Version"
  - platform: wifi_info
    ip_address:
     name: Device IP Address
    mac_address:
      name: ESP Mac Wifi Address

light:
  - platform: status_led
    name: "Wifi LED"
    id: wifi_led
    pin:  
      number: 8
      inverted: true
    internal: true

  - platform: binary
    name: "Power LED"
    id: power_led
    output: led_out
    internal: true

output:
  - id: led_out
    platform: gpio
    pin: 
      number: 23
      inverted: true    

button:    
  - platform: restart
    name: "Restart"
    id: re_start
    entity_category: diagnostic
  - platform: safe_mode
    name: Safe Mode Boot
    entity_category: diagnostic

switch:
# Relay itself
  - platform: gpio
    name: "switch"
    pin: GPIO26
    id: relay
    icon: mdi:power-socket-de
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - light.turn_on: power_led          
    on_turn_off:
      - light.turn_off: power_led
  # Stanby Power Save
  - platform: template
    name: "Save Standby Power"    
    id: switch_save
    icon: mdi:toggle-switch
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    # Overload Protect
  - platform: template
    name: "OverLoad Protection"    
    id: switch_olp
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:toggle-switch
    optimistic: true

lock:  
  - platform: template
    name:  Child's Lock
    id: child_lock
    optimistic: true

script:
  - id: power_save
    mode: restart
    then:
      - if:
          condition:
            for:
              time: 300s
              condition:
                and:              
                  - switch.is_on: relay
                  - switch.is_on: switch_save
                  - lambda: return (id(power).state <= id(set_num).state );
          then: 
            - switch.turn_off: relay
  - id: led_restore
    mode: restart
    then:
      - if: # Relay Status OFF
           condition:
             - switch.is_off: relay
           then:
             - light.turn_off: power_led
           else:
             - light.turn_on: power_led
